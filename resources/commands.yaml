---
- cmd: WIN_GAME()
  rootLvl: FORBID
  wins: true
  doc: |
    Tells the game that you have won the level.

    This command must be included in single player games to tell the player he has won. In multiplayer levels, it is not necessary. You should always use them with IF commands to make sure something happens to cause the game to end.

- cmd: LOSE_GAME()
  rootLvl: FORBID
  doc: |
    Tells the game you have lost the level.

    This command does not always need to be included as you will automatically lose the level if you Dungeon Heart is destroyed. You should include it if there is a strict goal the player needs to attain.

- cmd: SET_FLAG([player:PLAYER/ALL_PLAYERS],[flag:SETTABLE_VAR],[value:NUMBER])
  flagWriteAt: [1]
  doc: Sets up a flag that is assigned a number.

- cmd: SET_TIMER([player:PLAYER/ALL_PLAYERS],[timer:TIMER])
  timerWriteAt: [1]
  doc: Sets up a timer that increases by 1 every game turn from when it was triggered.

- cmd: IF([player:PLAYER/ALL_PLAYERS],[left B:READSET_VAR][operator:COMPARE_OPERATOR][right A:NUMBER/PLAYER/ALL_PLAYERS],[right B:READSET_VAR])
  opts: 1
  signChanges: [IF 3 IS NUMBER SET 4 VOID, IF 3 IS PLAYER SET 4 REQUIRED, IF 3 IS ALL_PLAYERS SET 4 REQUIRED]
  flagReadAt: [1, 4]
  timerReadAt: [1, 4]
  condition: PUSH
  doc: This is used to test the differences between two values. If those two values agree with the comparison, the script will continue. If the two values do not agree with the comparison, the script will find the next ENDIF and continue from there.

- cmd: IF_AVAILABLE([player:PLAYER/ALL_PLAYERS],[left B:ROOM/POWER/TRAP/DOOR/CREATURE][operator:COMPARE_OPERATOR][right A:NUMBER/PLAYER/ALL_PLAYERS],[right B:ROOM/POWER/TRAP/DOOR/CREATURE])
  opts: 1
  signChanges: [IF 3 IS NUMBER SET 4 VOID, IF 3 IS PLAYER SET 4 REQUIRED, IF 3 IS ALL_PLAYERS SET 4 REQUIRED]
  condition: PUSH
  doc: Allows you to ask whether something is available to that player. If it is not, then the answer will be 0. If it is then the answer will be 1.

- cmd: IF_ACTION_POINT([action point:ACTION_POINT],[player:PLAYER/ALL_PLAYERS])
  condition: PUSH
  apReadAt: 0
  doc: Detects whether an Action Point has been trigger by one of that players creatures. The Action point is only triggered once (unless you use the RESET_ACTION_POINT command) and you can only detect which player triggered it.

- cmd: ENDIF()
  condition: POP
  doc: This command must be placed at the end of all IF statements. This tells the IF command where to jump to when the comparisons in the statement are not met.

- cmd: RESET_ACTION_POINT([action point:ACTION_POINT])
  apWriteAt: 0
  doc: Once an Action Point has been triggered, it cannot be triggered again unless it has been reset by this command.

- cmd: NEXT_COMMAND_REUSABLE()
  reuses: true
  doc: |
    Once any action command has been triggered once, it cannot be triggered again. This means that you cannot create loops or generators that add heroes to the level each time one of your creatures steps foot in a room. To get around this, the Dungeon Keeper script has a special command called NEXT_COMMAND_REUSABLE.
    
    You will need to place this in front of every command in the loop to make it work (it does not need to be placed in front of IF commands)

- cmd: SET_GENERATE_SPEED([time:TIME])
  rootLvl: ENFORCE
  doc: This command tells the game how long to wait before generating a new creature for each player. The type of creatures that appear cannot be scripted and will depend on the rooms the player has built. This is a global setting and will apply to all Portals.

- cmd: COMPUTER_PLAYER([keeper:KEEPER],[behavior:COMPUTER])
  rootLvl: ENFORCE
  doc: If you have placed down an enemy dungeon heart (not a hero dungeon heart), this command tells Dungeon Keeper that a computer player needs to be assigned.

- cmd: START_MONEY([player:PLAYER/ALL_PLAYERS],[gold:GOLD])
  rootLvl: ENFORCE
  doc: Sets how much gold a player has at the start of the level.

- cmd: MAX_CREATURES([player:PLAYER/ALL_PLAYERS],[max amount:BYTE])
  doc: The maximum number of creatures a player can have. The player can still gain creatures through Scavenging and Torturing but no more will come through the portal until the number of creatures drops below the maximum again.

- cmd: ALLY_PLAYERS([player A:KEEPER/PLAYER_GOOD],[player B:KEEPER/PLAYER_GOOD],[allied:BINARY])
  doc: Marks two players as allied, or ends the alliance.

- cmd: ADD_CREATURE_TO_POOL([creature type:CREATURE],[amount:BYTE])
  doc: Sets the number of creatures that are placed in this pool.

- cmd: CREATURE_AVAILABLE([player:PLAYER/ALL_PLAYERS],[creature type:CREATURE],[can be available:BINARY],[amount forced:BYTE])
  doc: Tells the game that a specific creature can come through that player's portal.

- cmd: ROOM_AVAILABLE([player:PLAYER/ALL_PLAYERS],[room:ROOM],[can be available:ROOM_AVAILABILITY],[is available:BINARY])
  doc: Tells the game that a specific room is available for the player to place down.

- cmd: DOOR_AVAILABLE([player:PLAYER/ALL_PLAYERS],[door:DOOR],[can be available:BINARY],[number available:NUMBER+])
  doc: This command tells the game that a specific door is available for the player to construct.

- cmd: TRAP_AVAILABLE([player:PLAYER/ALL_PLAYERS],[trap:TRAP],[can be available:BINARY],[number available:NUMBER+])
  doc: This command tells the game that a specific trap is available for the player to construct.

- cmd: MAGIC_AVAILABLE([player:PLAYER/ALL_PLAYERS],[power:POWER],[can be available:BINARY],[is available:BINARY])
  doc: This command tells the game that a specific spell is available for the player to cast.

- cmd: DEAD_CREATURES_RETURN_TO_POOL([return:BINARY])
  doc: Normally, when a creature dies, and its body vanishes, it is added to the creature pool again. This command allows you to ensure that all dead creatures are dead forever.

- cmd: SET_CREATURE_MAX_LEVEL([player:PLAYER/ALL_PLAYERS],[creature type:CREATURE],[creature level:1-10])
  doc: This command sets the maximum experience level the creature can train to. You can use this to stop certain creatures from becoming too powerful.

- cmd: SET_CREATURE_STRENGTH([creature:CREATURE],[strength:BYTE])
  doc: This command sets the strength of all the creatures of that type on the level. Each creature has a default strength which can be found in the creature.txt file, e.g. the BILE_DEMON has a strength level of 80.

- cmd: SET_CREATURE_HEALTH([creature:CREATURE],[health:NUMBER+])
  doc: This command sets the health of all the creatures of that type on the level. Each creature has a default full health level which can be found in the creature.txt file, e.g. the DRAGON has a full health level of 900.

- cmd: SET_CREATURE_ARMOUR([creature:CREATURE],[armour:BYTE])
  doc: This command sets the armour of all the creatures of that type on the level. Each creature has a default armour level which can be found in the creature.txt file, e.g. the Dark Mistress has a armour level of 50.

- cmd: SET_CREATURE_FEAR([creature:CREATURE],[fear:BYTE])
  doc: This command sets the fear of all the creatures of that type on the level. Each creature has a default fear which can be found in the creature.txt file, e.g. the FLY has a fear level of 30.

- cmd: RESEARCH([player:PLAYER/ALL_PLAYERS],[research type:RESEARCH_TYPE],[room or power:ROOM/POWER],[research value:NUMBER+])
  signChanges: [IF 1 EQ ROOM SET 2 ROOM, IF 1 EQ MAGIC SET 2 POWER]
  doc: Adjusts the research value for individual rooms or spells and even for a specific player.
  rootLvl: ENFORCE

- cmd: ADD_CREATURE_TO_LEVEL([owner player:PLAYER],[creature:CREATURE],[spawn location:LOCATION],[creatures amount:BYTE],[levels:1-10],[gold carried:GOLD])
  doc: This command will add a number of new creatures to the level at the co-ordinates of a specifies Action Point. You cannot set where the creatures head for so you may need to use a party instead.

- cmd: ADD_TUNNELLER_TO_LEVEL([owner player:PLAYER],[spawn location:LOCATION],[head for:HEAD_FOR],[target:BYTE],[tunneler level:1-10],[gold carried:GOLD])
  signChanges: [IF 2 EQ ACTION_POINT SET 3 ACTION_POINT/HERO_GATE, IF 2 EQ DUNGEON SET 3 KEEPER_INDEX, IF 2 EQ DUNGEON_HEART SET 3 KEEPER_INDEX, IF 2 EQ APPROPIATE_DUNGEON SET 3 NUMBER]
  doc: This commands adds a number of Tunneller Dwarves to the level. They will immediately start digging towards their target. Tunneller Dwarves are the only creatures that can tunnel towards a target.

- cmd: CREATE_PARTY([unique party name:NEW_PARTY])
  rootLvl: ENFORCE
  doc: This command tells the game to expect a party with a specific name.

- cmd: ADD_TO_PARTY([party:PARTY],[creature:CREATURE],[level:1-10],[gold carried:GOLD],[objective:OBJECTIVE],[delay:TIME])
  partyAddAt: 0
  doc: This command adds a number of creatures to a party (maximum seven).

- cmd: ADD_TUNNELLER_PARTY_TO_LEVEL([owner player:PLAYER],[party:PARTY],[spawn location:LOCATION],[head for:HEAD_FOR],[target:ACTION_POINT/HERO_GATE/BYTE],[tunneler level:1-10],[gold carried:GOLD])
  signChanges: [IF 3 EQ ACTION_POINT SET 4 ACTION_POINT/HERO_GATE, IF 3 EQ DUNGEON SET 4 KEEPER_INDEX, IF 3 EQ DUNGEON_HEART SET 4 KEEPER_INDEX, IF 3 EQ APPROPIATE_DUNGEON SET 4 NUMBER]
  partyReadAt: 1
  doc: This adds a specified party of creatures to the level with a Tunneller Dwarf as it's leader. The Tunneller will immediately dig to it's target and the other creatures will follow.

- cmd: ADD_PARTY_TO_LEVEL([owner player:PLAYER],[party:PARTY],[spawn location:LOCATION],[party copies:BYTE])
  partyReadAt: 1
  doc: Adds a party to the level.

- cmd: DISPLAY_OBJECTIVE([message number:NUMBER+],[zoom target:LOCATION/ALL_PLAYERS])
  doc: Displays one of the text messages stored in TEXT.DAT file (if used in Dungeon Keeper) or DD1TEXT.DAT (if used in Deeper Dungeons) in an Objective Box. This file comes in various language version, so messages from it are always in the language selected during installation of Dungeon Keeper.
  opts: 1

- cmd: DISPLAY_OBJECTIVE_WITH_POS([message number:NUMBER+],[zoom X coordinate:SUBTILE],[zoom Y coordinate:SUBTILE])
  doc: Displays one of the text messages stored in TEXT.DAT file (if used in Dungeon Keeper) or DD1TEXT.DAT (if used in Deeper Dungeons) in an Objective Box. Allows to enter map coordinates of an area which is shown when the eye icon is clicked on the message.

- cmd: DISPLAY_INFORMATION([message number:NUMBER+],[zoom target:LOCATION/ALL_PLAYERS])
  opts: 1
  doc: Creates a text box with Information Pop-up Icon. Works identical (except of the icon) as DISPLAY_OBJECTIVE.

- cmd: DISPLAY_INFORMATION_WITH_POS([message number:NUMBER+],[zoom X coordinate:SUBTILE],[zoom Y coordinate:SUBTILE])
  doc: Creates a text box with Information Pop-up Icon. Works identical (except of the icon) as DISPLAY_OBJECTIVE_WITH_POS.

- cmd: QUICK_OBJECTIVE([message number:MSG_NUMBER],[message:TEXT],[zoom target:LOCATION/ALL_PLAYERS])
  opts: 1
  doc: Works like DISPLAY_OBJECTIVE, but instead of using a string from translations, allows to type it directly.

- cmd: QUICK_INFORMATION([message number:MSG_NUMBER],[message:TEXT],[zoom target:LOCATION/ALL_PLAYERS])
  opts: 1
  doc: Works like DISPLAY_INFORMATION, but instead of using a string from translations, allows to type it directly.

- cmd: TUTORIAL_FLASH_BUTTON([button:BUTTON],[time:NUMBER])
  doc: Flashes a button on the toolbar. Use '-1' for time to flash the area until player selects it.

- cmd: BONUS_LEVEL_TIME([countdown:TIME])
  doc: Sets the time a player has to complete an objective. A timer appears in the top right corner of the screen. The value shown on timer is amount of game turns left divided by 2. This command does not create the counter, it only sets the bonus level time shown on it.

- cmd: SET_MUSIC([track:NUMBER])
  doc: Chooses the music track to play.

- cmd: SET_COMPUTER_PROCESS([player:PLAYER/ALL_PLAYERS],[process:COMP_PROCESS],[priority:UNKNOWN],[data1:UNKNOWN],[data2:UNKNOWN],[data3:UNKNOWN],[data4:UNKNOWN])
  opts: 4
  rootLvl: ENFORCE

- cmd: SET_COMPUTER_CHECKS([player:PLAYER/ALL_PLAYERS],[check:COMP_CHECK],[period:TIME],[data1:UNKNOWN],[data2:UNKNOWN],[data3:UNKNOWN],[data4:UNKNOWN])
  opts: 4
  rootLvl: ENFORCE

- cmd: SET_COMPUTER_EVENT([player:PLAYER/ALL_PLAYERS],[event:COMP_EVENT],[data1:UNKNOWN],[data2:UNKNOWN],[data3:UNKNOWN],[data4:UNKNOWN],[data5:UNKNOWN])
  opts: 5
  rootLvl: ENFORCE

- cmd: SET_COMPUTER_GLOBALS([players:PLAYER/ALL_PLAYERS],[global:COMP_GLOBAL],[data1:UNKNOWN],[data2:UNKNOWN],[data3:UNKNOWN],[data4:UNKNOWN],[data5:UNKNOWN])
  opts: 6
  rootLvl: ENFORCE

- cmd: LEVEL_VERSION([version:VERSION])
  rootLvl: ENFORCE
  doc: |
    Lets the game know if the level was designed specially for KeeperFX. To use new script commands, you must start the script with LEVEL_VERSION(1).
    
    Without it, the new commands will not work properly, and the game will try to emulate old behavior of commands which were modified.

- cmd: DRAWFROM([AUTO],[AUTO],[AUTO],[AUTO],[AUTO],[AUTO],[AUTO],[AUTO])
  opts: 7
  returns: AUTO
  doc: |
    Is not a command itself but may replace a parameter of most other commands. Replaces the old RANDOM() command. It draws at random one value or number from up to eight parameters.

    The command shouldn't be used in multiplayer maps, as it will lead to synchronization problems. Value represented by DRAWFROM is selected at start of a map, and never changes during the gameplay.

- cmd: IMPORT([player:PLAYER/ALL_PLAYERS],[campaign flag:CAMPAIGN_FLAG])
  returns: NUMBER/NUMBER+/BYTE/GOLD/BINARY/TIME/ACTION_POINT/HERO_GATE/POWER_LVL/SLAB/SUBTILE/LVL/ROOM_AVAILABILITY/1-10

- cmd: DISPLAY_TIMER([player:PLAYER/ALL_PLAYERS],[timer:TIMER],[use clocktime:BINARY])
  timerReadAt: [1]
  doc: Displays a script timer on screen.

- cmd: ADD_GOLD_TO_PLAYER([player:PLAYER/ALL_PLAYERS],[gold:NUMBER])
  doc: Allows to add some off-map gold as a reward to a player.

- cmd: ADD_TO_CAMPAIGN_FLAG([player:PLAYER/ALL_PLAYERS],[campaign flag:CAMPAIGN_FLAG],[amount added:NUMBER])
  doc: Adds a numeric value to the current campaign_flag value. Function has been completely absorbed by ADD_TO_FLAG command which accepts all Flag types, including campaign flags.

- cmd: ADD_TO_FLAG([player:PLAYER/ALL_PLAYERS],[flag:FLAG/CAMPAIGN_FLAG/CUSTOM_BOX],[amount added:NUMBER])
  flagWriteAt: [1]
  doc: Adds a numeric value to the current flag value.

- cmd: CHANGE_CREATURE_OWNER([creature owner:PLAYER/ALL_PLAYERS],[creature:CREATURE/ANY_CREATURE],[criterion:CRITERION],[new owner:PLAYER])
  doc: Changes the owner of given creature based on given criterion.

- cmd: CHANGE_SLAB_OWNER([slab X coordinate:SLAB],[slab Y coordinate:SLAB],[new owner:PLAYER],[fill type:FILL_TYPE])
  doc: Changes the owner of a slab on the map to specified player. If it's part of a room, the entire room changes owner. Will change PATH to PRETTY_PATH.
  opts: 1

- cmd: CHANGE_SLAB_TYPE([slab X coordinate:SLAB],[slab Y coordinate:SLAB],[new slab:SLAB_TYPE],[fill type:FILL_TYPE])
  doc: Changes a slab on the map to the specified new one. It will not change an entire room, just a single slab.
  opts: 1

- cmd: DISPLAY_COUNTDOWN([player:PLAYER/ALL_PLAYERS],[timer:TIMER],[show difference:BINARY],[use clocktime:BINARY])
  doc: Displays on screen how long a specific script timer reaches the target turn.

- cmd: DISPLAY_VARIABLE([player:PLAYER/ALL_PLAYERS],[variable:READABLE_VAR],[show difference target:NUMBER],[target type:DISPLAY_VAR_TARGET_TYPE])
  opts: 2
  doc: Displays a script variable on screen.
  flagReadAt: [1]

- cmd: EXPORT_VARIABLE([player:PLAYER/ALL_PLAYERS],[variable:READABLE_VAR],[campaign flag:CAMPAIGN_FLAG])
  flagReadAt: [1]
  doc: Exports a variable to a campaign flag to use in a future campaign level. To be used together with the IMPORT command.

- cmd: IF_CONTROLS([player:PLAYER/ALL_PLAYERS],[left B:CREATURE/CREATURE_GLOBAL][operator:COMPARE_OPERATOR][right A:NUMBER/PLAYER/ALL_PLAYERS],[right B:CREATURE/CREATURE_GLOBAL])
  opts: 1
  signChanges: [IF 3 IS NUMBER SET 4 VOID, IF 3 IS PLAYER SET 4 REQUIRED]
  condition: PUSH
  doc: Allows to execute commands based on the items a player controls. Returns how many creatures of given kind the player owns, excluding these under enemy control (in custody). Also accepts TOTAL_CREATURES, TOTAL_DIGGERS, EVIL_CREATURES and GOOD_CREATURES.

- cmd: IF_SLAB_OWNER([slab X coordinate:SLAB],[slab Y coordinate:SLAB],[check owner:PLAYER])
  condition: PUSH
  doc: Checks if a specific slab on the map belongs to specified player.

- cmd: IF_SLAB_TYPE([slab X coordinate:SLAB],[slab Y coordinate:SLAB],[slab type:SLAB_TYPE])
  condition: PUSH
  doc: Checks if a specific slab is of a specific type.

- cmd: KILL_CREATURE([player:PLAYER/ALL_PLAYERS],[creature:CREATURE/ANY_CREATURE],[criterion:CRITERION],[amount:NUMBER+])
  doc: Kills given amount of creatures based on given criterion.

- cmd: LEVEL_UP_CREATURE([player:PLAYER/ALL_PLAYERS],[creature:CREATURE/ANY_CREATURE],[criterion:CRITERION],[levels:1-10])
  doc: Levels up given creature based on given criterion.

- cmd: PLAY_MESSAGE([player:KEEPER],[audio type:AUDIO_TYPE],[sound number:NUMBER+])
  doc: Allows to play any SOUND or SPEECH from the game. Messages can be found here. To hear which sounds are available use the DKSound utility from the DKtools pack.

- cmd: RESEARCH_ORDER([player:PLAYER/ALL_PLAYERS],[research type:RESEARCH_TYPE],[room or spell:ROOM/POWER],[research value:NUMBER+])
  doc: When this command is first called, the research list for specified players is cleared. Using it you may create a research list from beginning. Note that if you won't place an item on the list, it will not be possible to research it. So if you're using this command, you must add all items available on the level to the research list.

- cmd: REVEAL_MAP_LOCATION([player:PLAYER/ALL_PLAYERS],[target location:LOCATION],[range:SUBTILE/NUMBER])
  doc: Reveals square area of subtiles around given location. Use -1 for range to reveal the entire reachable area.

- cmd: REVEAL_MAP_RECT([player:PLAYER/ALL_PLAYERS],[subtile X coord:SUBTILE],[subtile Y coord:SUBTILE],[reveal width:SUBTILE],[reveal height:SUBTILE])
  doc: Reveals rectangular map area for given player.

- cmd: RUN_AFTER_VICTORY([run:BINARY])
  rootLvl: ENFORCE
  doc: Lets the game know the script should continue to run after the game is won. Normally everything stops as soon as the a player wins the map, but include RUN_AFTER_VICTORY(1) in the script to have the game continue normally until the player presses the space bar. Useful if you want to give a player the chance to complete an optional objective you want to bring over to a next campaign level with SET_CAMPAIGN_FLAG or EXPORT_VARIABLE.

- cmd: SET_CREATURE_FEAR_STRONGER([creature:CREATURE],[fear percentage:NUMBER])
  doc: Allows to define how many times stronger the enemy has to be for our creature to escape from combat. The value is in %.

- cmd: SET_CREATURE_FEAR_WOUNDED([creature:CREATURE],[health percentage:BYTE])
  doc: Replacement for SET_CREATURE_FEAR. The value taken by this function is a percentage (0..100) and defines health drop required for the creature to escape from combat. A special value of 101 makes creature avoid any combat other than with one creature of the same kind.

- cmd: SET_CREATURE_FEARSOME_FACTOR([creature:CREATURE],[fearsome factor:NUMBER+])
  doc: Modifies this value from the creature config for a creature type. It determines how much more or less intimidating a unit is compared to what you would expect from looking at his Strength and Health values. Creatures with lots of spells tend to have a value above 100. Use this command when you've modified a unit type in the level script and need a fear response to match.

- cmd: SET_CREATURE_PROPERTY([creature:CREATURE],[property:CREATURE_PROPERTY],[enabled:BINARY])
  doc: Allows to enable/disable a creature property.

- cmd: SET_DOOR_CONFIGURATION([door name:DOOR],[manufacture level:NUMBER+],[manufacture points:NUMBER+],[selling value:NUMBER+],[health:NUMBER+])
  doc: Allows you to make changes to door values set in trapdoor.cfg

- cmd: SET_GAME_RULE([rule name:GAME_RULE],[value:NUMBER])
  doc: Allows you to make changes to door values set in rules.cfg. You can make them conditional with IF statements.

- cmd: ADD_BONUS_TIME([turns:NUMBER])
  doc: Add or remove turns to the Bonus Level timer. Allows negative values.

- cmd: ADD_HEART_HEALTH([player:PLAYER/ALL_PLAYERS],[health:NUMBER],[mentor warn:BINARY])
  doc: Restores or drains health from a players Dungeon Heart. Can't exceed the standard max health value. Full heart has 30000 hitpoints.
  opts: 1

- cmd: ADD_OBJECT_TO_LEVEL([object:OBJECT],[location:LOCATION],[property:NUMBER])
  doc: Place any object at a specific place on the map.

- cmd: ADD_TO_TIMER([player:PLAYER/ALL_PLAYERS],[timer:TIMER],[turns:TIME])
  doc: Add or remove turns to the Script timer. Allows negative values.

- cmd: CHANGE_CREATURES_ANNOYANCE([player:PLAYER/ALL_PLAYERS],[creature:CREATURE/ANY_CREATURE],[operation:OPERATION],[annoyance:NUMBER+])
  doc: Can set, increase or decrease the happiness level of units.

- cmd: COMPUTE_FLAG([set player:PLAYER/ALL_PLAYERS],[set flag:SETTABLE_VAR],[operation:OPERATION],[src player:PLAYER/ALL_PLAYERS],[src flag:READABLE_VAR],[alt:BINARY])
  flagWriteAt: [1]
  flagReadAt: [4]
  timerWriteAt: [1]
  timerReadAt: [4]
  doc: |
    Modifies flag's value based on variables or other flags and values.

    where:

    [set player] - The player's name, e.g. PLAYER1.

    [set flag] - The flag's name to which you'll set the value.

    [operation] - Can be SET, INCREASE, DECREASE, MULTIPLY. SET replaces original value, the other three modify it.

    [src player] - The arg/source player's name, e.g. PLAYER1.

    [src var] - Source variable which will be set/added/etc to [flag]

    [alt] - If set to 1, creature flags will be interpreted as in IF_CONTROLS and rooms/doors/traps as in IF_AVAILABLE. Set it to 0 and it takes the value as IF uses it.

- cmd: COMPUTER_DIG_TO_LOCATION([player:PLAYER/ALL_PLAYERS],[origin:LOCATION],[destination:LOCATION])
  doc: Makes a computer player dig somewhere.

- cmd: CONCEAL_MAP_RECT([player:PLAYER/ALL_PLAYERS],[subtile X coord:SUBTILE],[subtile Y coord:SUBTILE],[width:SUBTILE],[height:SUBTILE],[hide revealed:BINARY])
  opts: 1
  doc: Conceals part of the map with fog of war, opposite to REVEAL_MAP_RECT

- cmd: CREATE_EFFECT([effect:NUMBER/EFFECT],[location:LOCATION])
  doc: Create an Effect at a location. Can be any effect or effect element that is in game, like the hearts that appear when healing, or the red smoke when claiming a room.

- cmd: CREATE_EFFECT_AT_POS([effect:NUMBER/EFFECT],[subtile X coord:SUBTILE],[subtile Y coord:SUBTILE])
  doc: Create an Effect at a subtile. Can be any effect or effect element that is in game, like the hearts that appear when healing, or the red smoke when claiming a room.

- cmd: CREATE_EFFECTS_LINE([origin:LOCATION],[destination:LOCATION],[curvature:NUMBER],[distance:BYTE],[speed:BYTE],[effect:NUMBER/EFFECT])
  doc: |
    Spawns an effect multiple times, forming a line.

    Where:
    
    [origin] - The origin location, where the first effect spawns. E.g. PLAYER1 or 1 to go from an action point.

    [destination] - The location where the line is drawn towards.

    [curvature] - 0 to go in a straight line, with bigger values to get a bigger curve. At 64 if you go from the the central top slab to the central bottom slab of a square room, it will go clockwise through the outer right slab. Use negative values to go counter-clockwise.

    [distance] - How far apart the effects forming the line are. Where 24 spawns effects a single slab apart

    [speed] - The delay between effects. With 80 being a second apart, and 0 is them all spawning at the same time. Max value is 127.

    [effect] - The effect to spawn. Can be any effect or effect element that is in game, like the hearts that appear when healing, or the red smoke when claiming a room.



- cmd: CREATURE_ENTRANCE_LEVEL([player:PLAYER/ALL_PLAYERS],[level:1-10])
  doc: Sets the level at which units come from the portal.

- cmd: DELETE_FROM_PARTY([party:PARTY],[creature:CREATURE],[level:1-10])
  partyDeleteAt: 0
  doc: Removes a unit from a defined party. Use it before the party is added to the level. When two equal units are in the party, the one that was first added will be deleted.

- cmd: DISPLAY_MESSAGE([message number:NUMBER],[icon:PLAYER/ALL_PLAYERS/CREATURE/UNKNOWN])
  doc: Displays one of the text messages from language-specific strings banks as a chat message, with a specific unit or player shown as the sender. It disappears automatically after some time.

- cmd: HEART_LOST_OBJECTIVE([message number:NUMBER],[zoom location:LOCATION/ALL_PLAYERS])
  doc: Displays an Objective message when the player lost his Dungeon Heart. Works like DISPLAY_OBJECTIVE.

- cmd: HEART_LOST_QUICK_OBJECTIVE([message number:MSG_NUMBER],[message:TEXT],[zoom location:LOCATION/ALL_PLAYERS])
  doc: Displays an Objective message when the player lost his Dungeon Heart. Works like QUICK_OBJECTIVE.

- cmd: HIDE_TIMER()
  doc: Hides the timer that has been made visible with DISPLAY_TIMER

- cmd: HIDE_VARIABLE()
  doc: Hides the variable that has been made visible with DISPLAY_VARIABLE

- cmd: QUICK_MESSAGE([message number:MSG_NUMBER],[message:TEXT],[icon:PLAYER/ALL_PLAYERS/CREATURE/UNKNOWN])
  doc: Works like DISPLAY_MESSAGE, but instead of using a string from translations, allows to type it directly.

- cmd: RANDOMISE_FLAG([player:PLAYER/ALL_PLAYERS],[flag:FLAG/CAMPAIGN_FLAG],[max value:NUMBER])
  flagWriteAt: [1]
  doc: Gives a flag a true random value. Can be used to get truly random level scripts.

- cmd: REMOVE_SACRIFICE_RECIPE([CREATURE],[CREATURE],[CREATURE],[CREATURE],[CREATURE])  
  opts: 4
  doc: Removes a Temple recipe.

- cmd: SET_HEART_HEALTH([player:PLAYER/ALL_PLAYERS],[health:NUMBER+])
  doc: Set the Dungeon Heart health to a specific value for a player. Must be below the max health of the player.

- cmd: SET_SACRIFICE_RECIPE([command:SACRIFICE_CMD],[reward:CREATURE/FLAG/UNKNOWN],[CREATURE],[CREATURE],[CREATURE],[CREATURE],[CREATURE])
  opts: 4
  doc: |
    Creates or modifies a Temple recipe.

    Where:

    [command] - The possible commands as listed in the sacrifices section in rules.cfg. Additionally, CUSTOMREWARD and CUSTOMPUNISH may be used. These play the respective sounds, and may increase the flag as configured for the reward parameter.

    [reward] - The Creature, Spell or Unique function that is triggered when the Sacrifice completes, as seen in rules.cfg. Use FLAG0-FLAG7 to indicate which flag is raised when a player completes the sacrifice.

    [creature1] to [creature5] are creature names, like HORNY. Only the first one is mandatory.

- cmd: SET_BOX_TOOLTIP([box number:BYTE],[tooltip:TEXT])
  rootLvl: ENFORCE
  doc: Creates a custom tooltip for Custom special boxes.

- cmd: SET_BOX_TOOLTIP_ID([box number:BYTE],[message number:NUMBER])
  rootLvl: ENFORCE
  doc: Sets a Tooltip on a custom special box, with a text from the language files.

- cmd: SET_CREATURE_CONFIGURATION([creature:CREATURE],[property:CREATURE_CONFIG],[value:UNKNOWN],[second value:UNKNOWN])
  doc: Allows you to make changes to attribute values set in the unit configuration files.
  opts: 1

- cmd: SET_DOOR_CONFIGURATION([door name:DOOR],[property:DOOR_CONFIG],[value:UNKNOWN],[second value:UNKNOWN])
  opts: 1
  doc: Allows you to make changes to door values set in trapdoor.cfg.

- cmd: SET_OBJECT_CONFIGURATION([object name:OBJECT],[property:OBJECT_CONFIG],[value:UNKNOWN],[second value:UNKNOWN])
  doc: Allows you to make changes to object values set in objects.cfg.
  opts: 1

- cmd: SET_TRAP_CONFIGURATION([trap name:TRAP],[property:TRAP_CONFIG],[value:UNKNOWN],[second value:UNKNOWN])
  opts: 1
  signChanges: [
    IF 1 EQ TriggerType SET 2 TRAP_TRIGGER_TYPE,
    IF 1 EQ ActivationType SET 2 TRAP_ACTIVATION_TYPE,
    IF 1 EQ Hidden SET 2 BINARY,
    IF 1 EQ Slappable SET 2 BINARY,
    IF 1 EQ TriggerAlarm SET 2 BINARY,
    IF 1 EQ Unanimated SET 2 BINARY
  ]
  doc: Allows you to make changes to trap values set in trapdoor.cfg.

- cmd: USE_POWER([player:PLAYER/ALL_PLAYERS],[power:POWER],[free:BINARY])
  doc: Casts an untargeted keeper power through the level script.

- cmd: USE_POWER_AT_LOCATION([player:PLAYER/ALL_PLAYERS],[location:LOCATION],[power:POWER],[power lvl:POWER_LVL],[free:BINARY])
  doc: Casts a keeper power at specific map location through the level script.

- cmd: USE_POWER_AT_POS([player:PLAYER/ALL_PLAYERS],[subtile X coord:SUBTILE],[subtile Y coord:SUBTILE],[power:POWER],[power lvl:POWER_LVL],[free:BINARY])
  doc: Casts a keeper power somewhere at the map through the level script.

- cmd: USE_POWER_ON_CREATURE([player:PLAYER/ALL_PLAYERS],[creature:CREATURE/ANY_CREATURE],[criterion:CRITERION],[caster player:PLAYER],[power:POWER],[power lvl:POWER_LVL],[free:BINARY])
  doc: Casts a keeper power on a specific creature. It also accepts non-targeted powers like POWER_SIGHT, which will simply use the location of the unit.

- cmd: USE_SPECIAL_INCREASE_LEVEL([player:PLAYER/ALL_PLAYERS],[count:BYTE])
  doc: Actives the effect of an 'Increase Level' dungeon special.

- cmd: USE_SPECIAL_MULTIPLY_CREATURES([player:PLAYER/ALL_PLAYERS],[count:BYTE])
  doc: Actives the effect of an 'Multiply Creatures' dungeon special.

- cmd: USE_SPECIAL_MAKE_SAFE([player:PLAYER/ALL_PLAYERS])
  doc: Actives the effect of an 'Make Safe' dungeon special.

- cmd: USE_SPECIAL_LOCATE_HIDDEN_WORLD()
  doc: Actives the effect of an 'Locate Hidden World' dungeon special.

- cmd: USE_SPELL_ON_CREATURE([player:PLAYER/ALL_PLAYERS],[creature:CREATURE/ANY_CREATURE],[criterion:CRITERION],[spell:SPELL],[spell lvl:1-10/ZERO])
  doc: Casts a unit spell on a specific creature. Only abilities with actual spell effects can be used.

- cmd: SACRIFICED[[creature:CREATURE]]
  returns: GLOBAL/FLAG/READSET_VAR/READABLE_VAR/SETTABLE_VAR
  doc: Returns how many creatures of the type were sacrificed.

- cmd: REWARDED[[creature:CREATURE]]
  returns: GLOBAL/FLAG/READSET_VAR/READABLE_VAR/SETTABLE_VAR
  doc: Returns how many units of the type the player has received from the temple.

- cmd: AT_ACTION_POINT[[ACTION_POINT]]
  returns: CRITERION
  doc: Returns any creature at action point.

- cmd: SET_CREATURE_TENDENCIES([player:KEEPER/ALL_PLAYERS],[tendency:CREATURE_TENDENCY],[enable:BINARY])
  doc: Allows to set flee/imprison tendencies.

- cmd: SET_DOOR([state:LOCK_STATE],[slab X coordinate:SLAB],[slab Y coordinate:SLAB])
  doc: Allows you to lock or unlock a door on a particular slab.

- cmd: SET_CREATURE_INSTANCE([creature:CREATURE],[spell slot:1-10],[creature spell:CREATURE_SPELL],[spell lvl:1-10])
  doc: Allows you to change which spell instances creatures learn at which levels.

- cmd: USE_SPECIAL_TRANSFER_CREATURE([player:PLAYER/ALL_PLAYERS])
  doc: Actives the effect of an 'Transfer Creature' dungeon special.

- cmd: TRANSFER_CREATURE([player:PLAYER/ALL_PLAYERS],[creature:CREATURE/ANY_CREATURE],[criterion:CRITERION],[count:BYTE])
  doc: Transfers creatures as dungeon special would.

- cmd: SWAP_CREATURE([new creature config:UNKNOWN],[creature:CREATURE])
  doc: Replaces the creature with a new creature in the "new creature config".cfg file.

- cmd: SET_HAND_RULE([player:PLAYER/ALL_PLAYERS],[creature:CREATURE/ANY_CREATURE],[rule slot:RULE_SLOT],[rule action:RULE_ACTION],[rule:RULE],[param:VOID])
  signChanges: [
    IF 4 EQ AGE_LOWER SET 5 NUMBER,
    IF 4 EQ AGE_HIGHER SET 5 NUMBER,
    IF 4 EQ LEVEL_LOWER SET 5 1-10,
    IF 4 EQ LEVEL_HIGHER SET 5 1-10,
    IF 4 EQ AT_ACTION_POINT SET 5 ACTION_POINT,
    IF 4 EQ AFFECTED_BY SET 5 SPELL,
    IF 3 EQ ENABLE SET 4 VOID,
    IF 3 EQ DISABLE SET 4 VOID,
    IF 4 EQ AGE_LOWER SET 5 REQUIRED,
    IF 4 EQ AGE_HIGHER SET 5 REQUIRED,
    IF 4 EQ LEVEL_LOWER SET 5 REQUIRED,
    IF 4 EQ LEVEL_HIGHER SET 5 REQUIRED,
    IF 4 EQ AT_ACTION_POINT SET 5 REQUIRED,
    IF 4 EQ AFFECTED_BY SET 5 REQUIRED,
    IF 3 EQ ALLOW SET 4 REQUIRED,
    IF 3 EQ DENY SET 4 REQUIRED,
    IF 3 EQ ENABLE SET 4 VOID,
    IF 3 EQ DISABLE SET 4 VOID,
  ]
  opts: 2
  doc: |
    Makes some creatures (un)pickable or only (un)pickable under certain conditions:

    [player] - The player's name, e.g. PLAYER1.

    [creature] - The creature name, e.g. BILE_DEMON. Includes ANY_CREATURE.

    [rule_slot] - Rule slot a rule will be assigned to. There are 8 available slots per player's creature type: RULE0, RULE1, ..., RULE7

    [rule_action] - ALLOW or DENY. Whether creatures that match the rule should be allowed/denied from being picked up. If you just want to disable or re-enable rule already stored in a slot, use DISABLE or ENABLE and leave the last two params (rule, param) empty.

    [rule*] - rule condition. Only specify if rule_action is ALLOW/DENY.

    [param*] - rule parameter. See rules' docs for usage info. Leave blank if rule does not use any param.

    Rule checks are evaluated from the highest rule index (RULE7) to lowest (RULE0) and lower rules are ignored once a match is found.

- cmd: MOVE_CREATURE([player:PLAYER/ALL_PLAYERS],[creature:CREATURE/ANY_CREATURE],[criterion:CRITERION],[count:BYTE],[destination:LOCATION],[effect:NUMBER/EFFECT])
  opts: 1
  doc: Moves creatures instantly to the specified destination.

- cmd: COUNT_CREATURES_AT_ACTION_POINT([action point:ACTION_POINT],[player:PLAYER/ALL_PLAYERS],[creature:CREATURE/ANY_CREATURE],[write flag player:PLAYER],[write flag:SETTABLE_VAR])
  flagWriteAt: [4]
  doc: Counts creatures within action point and stores the value in flag.
